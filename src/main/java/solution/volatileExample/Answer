In this example, it is sufficient to make the variable stopGenerating volatile.
It is one of the use cases for volatile (the pattern "status flag"),
when there is only one "writer" (a thread modifying the shared variable), and
the volatile variable changes once in stopGenerating = true;
and on the right hand side we use a constant (not another variable or the previous value of the same variable).
So we do not need to worry about atomicity.
Volatile will also ensure that both threads (main and randomNumGenThread) will
see the most recent version of the variable (because reads/writes will be to the main memory).
